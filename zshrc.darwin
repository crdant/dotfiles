os="$(uname | awk '{print tolower($1)}')"
arch=$(uname -m)

# check if this is a work or home machine
function work() {
   [[ $os == "darwin" ]] && security find-certificate -c "OutSystems JSS Built-in Certificate Authority" &> /dev/null
}

# set up some named directories
function names {
  source=${1}
  if [ "$source" = "google" ] ; then
    inbox="/Volumes/GoogleDrive/My Drive/Inbox"
    outbox="/Volumes/GoogleDrive/My Drive/Outbox"
    pending="/Volumes/GoogleDrive/My Drive/Pending"
    read="/Volumes/GoogleDrive/My Drive/Read"
    watch="/Volumes/GoogleDrive/My Drive/Watch"
    archive="/Volumes/GoogleDrive/My Drive/Archive"
    projects="/Volumes/GoogleDrive/My Drive/Projects"
    accounts="/Volumes/GoogleDrive/My Drive/Archive/Accounts"
  elif [ "$source" = "onedrive" ] ; then 
    inbox="/Users/crdant/OneDrive - VMware, Inc/Inbox"
    outbox="/Users/crdant/OneDrive - VMware, Inc/Outbox"
    pending="/Users/crdant/OneDrive - VMware, Inc/Pending"
    read="/Users/crdant/OneDrive - VMware, Inc/Read"
    watch="/Users/crdant/OneDrive - VMware, Inc/Watch"
    archive="/Users/crdant/OneDrive - VMware, Inc/Archive"
    projects="/Users/crdant/OneDrive - VMware, Inc/Projects"
    accounts="/Users/crdant/OneDrive - VMware, Inc/Archive/Accounts"
  elif [ "$source" = "dropbox" ] ; then
    inbox=/Users/crdant/Dropbox/Inbox
    outbox=/Users/crdant/Dropbox/Outbox
    pending=/Users/crdant/Dropbox/Pending
    read=/Users/crdant/Dropbox/Read
    watch=/Users/crdant/Dropbox/Watch
    archive=/Users/crdant/Documents/Archive
    projects=/Users/crdant/Documents/Projects
    documents=/Users/crdant/Documents
    clients="/Users/crdant/Documents/Archive/Flying Mist/Clients"
  elif [ "$source" = "icloud" ] ; then
    inbox=/Users/crdant/Documents/Inbox
    outbox=/Users/crdant/Documents/Outbox
    pending=/Users/crdant/Documents/Pending
    read=/Users/crdant/Documents/Read
    watch=/Users/crdant/Documents/Watch
    archive=/Users/crdant/Documents/Archive
    projects=/Users/crdant/Documents/Projects
    documents=/Users/crdant/Documents
    accounts=/Users/crdant/Documents/Archives/Accounts
   else
    echo Using names from $NAMES_ARE_FROM_SOURCE
  fi

  # same on all Macs I'm using
  documents=/Users/crdant/Documents
  src=/Users/crdant/workspace
  workspace=/Users/crdant/workspace
  idisk=/Volumes/iDisk
  export NAMES_ARE_FROM_SOURCE=$source
}

if work ; then
  names google
  demos=/Users/crdant/workspace/demos
  accounts=/Users/crdant/workspace/accounts
else
  names icloud
fi

# company directories
acquia=/Users/crdant/Documents/Archive/Acquia
hp=/Users/crdant/Documents/Archive/HP
systinet=/Users/crdant/Documents/Archive/Systinet
statestreet="/Users/crdant/Documents/Archive/State Street"
pivotal="/Users/crdant/Documents/Archive/Pivotal"

# extract PDF
function extract {
	first=${1}
	last=${2}
	python /System/Library/Automator/Extract\ Odd\ \&\ Even\ Pages.action/Contents/Resources/extract.py --input=${3} --output=${3}_${1}-${2}.pdf --slice [${1}:${2}]
}

# cdf: cd's to frontmost window of Finder
cdf ()
{
    currFolderPath=$( /usr/bin/osascript <<SCRIPT
        tell application "Finder"
            try
		set currFolder to (folder of the front window as alias)
            on error
		set currFolder to (path to desktop folder as alias)
            end try
            POSIX path of currFolder
        end tell
SCRIPT
    )
    cd "$currFolderPath"
}

# common aliases
alias paste='curl -O `pbpaste`'
alias root-finder="sudo /System/Library/CoreServices/Finder.app/Contents/MacOS/Finder"
alias flushdns="dnscacheutil -flushcache"

# filetype aliases
alias -s txt=vimr
alias -s java=idea
alias -s xml=vimr
alias -s php=vimr
alias -s app=open

# check battery
alias battery="ioreg -l | grep Capacity"

# enable Terminal proxy icons
update_terminal_cwd() {
    # Identify the directory using a "file:" scheme URL,
    # including the host name to disambiguate local vs.
    # remote connections. Percent-escape spaces.
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
}
autoload add-zsh-hook
add-zsh-hook chpwd update_terminal_cwd
update_terminal_cwd

# add completions
# source /usr/local/share/zsh/site-functions/_go

# enable
export HOMEBREW_GITHUB_API_TOKEN=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
eval "$(direnv hook zsh)"

# use homebrew python
export PATH=/usr/local/opt/python3/libexec/bin:${PATH}

alias oni2='/Applications/Onivim2.app/Contents/MacOS/Oni2'

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

if [[  `uname -m` == 'arm64' ]]; then
  alias ibrew='arch --x86_64 /usr/local/bin/brew'
fi

source "$(brew --prefix)/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"

# added by Snowflake SnowSQL installer v1.2
export PATH=/Applications/SnowSQL.app/Contents/MacOS:$PATH

name: Update Replicated CLI
on:
  schedule:
    - cron: '15 */4 * * *'  # Every 4 hours, offset by 15 minutes  
  workflow_dispatch:

jobs:
  check-update:
    runs-on: ubuntu-latest
    outputs:
      updated: ${{ steps.check.outputs.updated }}
      old-version: ${{ steps.check.outputs.old-version }}
      new-version: ${{ steps.check.outputs.new-version }}
      tag-name: ${{ steps.check.outputs.tag-name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        
      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main
        
      - name: Check for Replicated updates
        id: check
        run: |
          python3 .github/scripts/update-package.py replicated

  calculate-darwin-hash:
    needs: check-update
    if: needs.check-update.outputs.updated == 'true'
    runs-on: macos-latest
    outputs:
      darwin-hash: ${{ steps.vendor.outputs.darwin-hash }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Calculate vendor hash for darwin
        id: vendor
        run: |
          python3 .github/scripts/calculate-go-vendor-hash.py replicated ${{ needs.check-update.outputs.new-version }} macos-latest

      - name: Test Replicated installation
        run: |
          .github/scripts/test-package.sh replicated

  calculate-linux-hash:
    needs: check-update
    if: needs.check-update.outputs.updated == 'true'
    runs-on: ubuntu-latest
    outputs:
      linux-hash: ${{ steps.vendor.outputs.linux-hash }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Calculate vendor hash for linux
        id: vendor
        run: |
          python3 .github/scripts/calculate-go-vendor-hash.py replicated ${{ needs.check-update.outputs.new-version }} ubuntu-latest

      - name: Test Replicated installation
        run: |
          .github/scripts/test-package.sh replicated

  update-and-create-pr:
    needs: [check-update, calculate-darwin-hash, calculate-linux-hash]
    if: needs.check-update.outputs.updated == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Update vendorHash values
        run: |
          # Get the vendor hashes from the job outputs
          DARWIN_HASH="${{ needs.calculate-darwin-hash.outputs.darwin-hash }}"
          LINUX_HASH="${{ needs.calculate-linux-hash.outputs.linux-hash }}"
          
          echo "Updating Replicated vendorHash values:"
          echo "Darwin: $DARWIN_HASH"
          echo "Linux: $LINUX_HASH"
          
          # Update the package file with new vendor hashes
          sed -i.bak -E "s|(vendorHash = if isDarwin then[[:space:]]*)\\\".+\\\"|\1\"$DARWIN_HASH\"|" pkgs/replicated/default.nix
          sed -i.bak -E "s|(else[[:space:]]*)\\\".+\\\";|\1\"$LINUX_HASH\";|" pkgs/replicated/default.nix
          
          # Show the changes
          echo "Updated package file:"
          cat pkgs/replicated/default.nix | grep -A3 -B1 vendorHash
          
      - name: Test updated package builds
        run: |
          .github/scripts/test-package.sh replicated
          
      - name: Test home-manager rebuild
        run: |
          # Test that home-manager builds with updated package
          # Find the correct home configuration name first
          nix eval --impure --json .#homeConfigurations --apply 'builtins.attrNames' | \
            jq -r '.[]' | grep "crdant" | head -1 | \
            xargs -I {} nix build ".#homeConfigurations.{}.activationPackage" --no-link
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: update Replicated CLI to v${{ needs.check-update.outputs.new-version }}"
          title: "chore: update Replicated CLI to v${{ needs.check-update.outputs.new-version }}"
          body: |
            ## ðŸ”„ Automated Package Update: Replicated CLI
            
            This is an automated update of the Replicated CLI package.
            
            ### Changes
            - **Previous version**: ${{ needs.check-update.outputs.old-version }}
            - **New version**: ${{ needs.check-update.outputs.new-version }}
            - **Release notes**: https://github.com/replicatedhq/replicated/releases/tag/${{ needs.check-update.outputs.tag-name }}
            
            ### Platform-specific Vendor Hashes Updated
            - **Darwin**: `${{ needs.calculate-darwin-hash.outputs.darwin-hash }}`
            - **Linux**: `${{ needs.calculate-linux-hash.outputs.linux-hash }}`
            
            ### Validation
            âœ… Package builds successfully on both macOS and Linux  
            âœ… Installation tests passed on both platforms  
            âœ… Home manager rebuild test passed  
            âœ… Vendor hashes calculated and verified for both platforms  
            
            ### Next Steps
            - Review the changes and ensure they look correct
            - Test the updated package in your environment
            - Merge when ready
            
            ---
            ðŸ¤– *This PR was created automatically by the Replicated CLI update workflow*
          branch: update-replicated-${{ needs.check-update.outputs.new-version }}
          delete-branch: true